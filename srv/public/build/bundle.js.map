{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/settings.js","../../src/lib/variants.js","../../src/lib/romanization.js","../../src/lib/delay.js","../../src/lib/groupid.js","../../src/svelte-virtual-list/VirtualList.svelte","../../src/main.svelte","../../src/lib/post.js","../../src/lib/get.js","../../src/lib/groupby.js","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","const protocol = document.location.protocol == 'https:' ? 'https' : 'http'\r\nconst domain   = document.location.hostname\r\nconst port     = 2122\r\nconst api      = `${protocol}://${domain}:${port}/api`\r\nexport default { api }\r\n","function get(words) {\r\n    let variants = {}\r\n    words.forEach(function(word) {\r\n        let key   = word.from\r\n        let value = word.to\r\n        if (!variants[key])\r\n            variants[key] = []\r\n        if (value)\r\n            if (variants[key].indexOf(value) == -1)\r\n                variants[key].push(value)\r\n    })\r\n    for (let key in variants)\r\n        variants[key].sort()\r\n    return variants\r\n}\r\n\r\nfunction attach(words, variants) {\r\n    words.forEach(function(word) {\r\n        let key       = word.from\r\n        word.variants = variants[key]\r\n    })\r\n}\r\n\r\nfunction apply(words) {\r\n    let variants = get(words)\r\n    attach(words, variants)\r\n    return words\r\n}\r\n\r\nexport default { apply }\r\n","function apply(words) {\r\n    words.forEach(function(word) {\r\n        word.romanization = romanize(word.from)\r\n    })\r\n    return words\r\n}\r\n\r\nexport default { apply }\r\n","const ms = 1000\r\n\r\nexport default function delay(fn) {\r\n    clearTimeout(fn.timer)\r\n    fn.timer = setTimeout(fn, ms)\r\n}\r\n","function create(group) {\r\n    let { chapter_id, verse_id } = group[0]\r\n    return `chapter-${chapter_id}-verse-${verse_id}`\r\n}\r\n\r\nfunction apply(groups) {\r\n    groups.forEach(function(group) {\r\n        group.id = create(group)\r\n    })\r\n    return groups\r\n}\r\n\r\nexport default { apply }\r\n","<script>\n\timport { onMount, tick } from 'svelte';\n\n\t// props\n\texport let items;\n\texport let height = '100%';\n\texport let itemHeight = undefined;\n\n\tlet foo;\n\n\t// read-only, but visible to consumers via bind:start\n\texport let offset = 0;\n\texport let start = 0;\n\texport let end = 0;\n\n\t// local state\n\tlet height_map = [];\n\tlet rows;\n\tlet viewport;\n\tlet contents;\n\tlet viewport_height = 0;\n\tlet visible;\n\tlet mounted;\n\n\tlet top = 0;\n\tlet bottom = 0;\n\tlet average_height;\n\n\t$: visible = items.slice(start, end).map((data, i) => {\n\t\treturn { index: i + start, data };\n\t});\n\n\t// whenever `items` changes, invalidate the current heightmap\n\t$: if (mounted) refresh(items, viewport_height, itemHeight);\n\n\tasync function refresh(items, viewport_height, itemHeight) {\n\t\tconst { scrollTop } = viewport;\n\n\t\tawait tick(); // wait until the DOM is up to date\n\n\t\tlet content_height = top - scrollTop;\n\t\tlet i = start;\n\n\t\twhile (content_height < viewport_height && i < items.length) {\n\t\t\tlet row = rows[i - start];\n\n\t\t\tif (!row) {\n\t\t\t\tend = i + 1;\n\t\t\t\tawait tick(); // render the newly visible row\n\t\t\t\trow = rows[i - start];\n\t\t\t}\n\n\t\t\tconst row_height = height_map[i] = itemHeight || row.offsetHeight;\n\t\t\tcontent_height += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = (top + content_height) / end;\n\n\t\tbottom = remaining * average_height;\n\t\theight_map.length = items.length;\n\t}\n\n\tasync function handle_scroll() {\n\t\tconst { scrollTop } = viewport;\n\n\t\tconst old_start = start;\n\n\t\tfor (let v = 0; v < rows.length; v += 1) {\n\t\t\theight_map[start + v] = itemHeight || rows[v].offsetHeight;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet y = 0;\n\n\t\twhile (i < items.length) {\n\t\t\tconst row_height = height_map[i] || average_height;\n\t\t\tif (y + row_height > scrollTop) {\n\t\t\t\tstart = i;\n\t\t\t\ttop = y;\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ty += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\twhile (i < items.length) {\n\t\t\ty += height_map[i] || average_height;\n\t\t\ti += 1;\n\n\t\t\tif (y > scrollTop + viewport_height) break;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = y / end;\n\n\t\twhile (i < items.length) height_map[i++] = average_height;\n\t\tbottom = remaining * average_height;\n\n\t\t// prevent jumping if we scrolled up into unknown territory\n\t\tif (start < old_start) {\n\t\t\tawait tick();\n\n\t\t\tlet expected_height = 0;\n\t\t\tlet actual_height = 0;\n\n\t\t\tfor (let i = start; i < old_start; i +=1) {\n\t\t\t\tif (rows[i - start]) {\n\t\t\t\t\texpected_height += height_map[i];\n\t\t\t\t\tactual_height += itemHeight || rows[i - start].offsetHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst d = actual_height - expected_height;\n\t\t\tviewport.scrollTo(0, scrollTop + d);\n\t\t}\n\n\t\t// TODO if we overestimated the space these\n\t\t// rows would occupy we may need to add some\n\t\t// more. maybe we can just call handle_scroll again?\n\t}\n\n\tfunction scroll() {\n\t\tlet start  = null\n\t\tlet target = offset\n\t\tlet speed  = 250\n\n\t\tfunction step(time) {\n\t\t\tif (start == null)\n\t\t\t\tstart = time\n\n\t\t\tlet elapsed = time - start\n\t\t\tlet delta   = elapsed * (speed / 1000)\n\t\t\tlet x       = viewport.scrollTop\n\t\t\tlet indexes = visible.map(value => value.index)\n\t\t\tlet index   = indexes.indexOf(target)\n\t\t\tlet found   = index != -1\n\n\t\t\tif (!found) {\n\t\t\t\twindow.requestAnimationFrame(step)\n\t\t\t\tviewport.scrollTo(0, x + delta)\n\t\t\t} else {\n\t\t\t\tlet object = rows[index]\n\t\t\t\tviewport.scrollTo(0, object.offsetTop)\n\t\t\t}\n\t\t}\n\n\t\twindow.requestAnimationFrame(step)\n\t}\n\n\t// trigger initial refresh\n\tonMount(() => {\n\t\trows = contents.getElementsByTagName('svelte-virtual-list-row');\n\t\tmounted = true;\n\t\tsetTimeout(scroll, 1000)\n\t});\n</script>\n\n<style>\n\tsvelte-virtual-list-viewport {\n\t\tposition: relative;\n\t\toverflow-y: auto;\n\t\t-webkit-overflow-scrolling:touch;\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-contents, svelte-virtual-list-row {\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-row {\n\t\toverflow: hidden;\n\t}\n</style>\n\n<svelte-virtual-list-viewport\n\tbind:this={viewport}\n\tbind:offsetHeight={viewport_height}\n\ton:scroll={handle_scroll}\n\tstyle=\"height: {height};\"\n>\n\t<svelte-virtual-list-contents\n\t\tbind:this={contents}\n\t\tstyle=\"padding-top: {top}px; padding-bottom: {bottom}px;\"\n\t>\n\t\t{#each visible as row (row.index)}\n\t\t\t<svelte-virtual-list-row>\n\t\t\t\t<slot item={row.data}>Missing template</slot>\n\t\t\t</svelte-virtual-list-row>\n\t\t{/each}\n\t</svelte-virtual-list-contents>\n</svelte-virtual-list-viewport>\n","<script type=\"text/javascript\">\r\n    import { onMount }  from 'svelte'\r\n    import settings     from './settings.js'\r\n    import groupby      from './lib/groupby.js'\r\n    import get          from './lib/get.js'\r\n    import post         from './lib/post.js'\r\n    import variants     from './lib/variants.js'\r\n    import romanization from './lib/romanization.js'\r\n    import delay        from './lib/delay.js'\r\n    import next_tick    from './lib/next-tick.js'\r\n    import groupid      from './lib/groupid.js'\r\n    import VirtualList  from './svelte-virtual-list'\r\n\r\n    let words  = []\r\n    let groups = []\r\n    let offset = 0\r\n\r\n    async function main() {\r\n        words  = await get(`${settings.api}/words`)\r\n        words  = romanization.apply(words)\r\n        words  = variants.apply(words)\r\n        groups = groupby(words, ['chapter_id', 'verse_id'])\r\n        groups = groupid.apply(groups)\r\n        offset = get_offset(groups)\r\n    }\r\n\r\n    function is_incomplete(group) {\r\n        return group.filter(word => !word.to).length > 0\r\n    }\r\n\r\n    function get_offset(groups) {\r\n        let index = groups.findIndex(is_incomplete)\r\n        index     = index == -1 ? 0 : index\r\n        index     = index == 0  ? 0 : index - 1\r\n        return index\r\n    }\r\n\r\n    async function save(word) {\r\n        let { chapter_id, verse_id, word_id, from, to } = word\r\n        let data   = { from, to }\r\n        let result = await post(`${settings.api}/chapters/${chapter_id}/verses/${verse_id}/words/${word_id}`, data)\r\n        word.to    = result.to\r\n        variants.apply(words)\r\n        groups = groups\r\n    }\r\n\r\n    function change(word, to) {\r\n        word.to = to\r\n        return save(word)\r\n    }\r\n\r\n    onMount(main)\r\n</script>\r\n\r\n<div class=\"uppercase full-height\">\r\n    <VirtualList items={groups} let:item={group} bind:offset>\r\n        <div>\r\n            <div id=\"{group.id}\" class=\"group\">\r\n                <h2>\r\n                    chapter <span>{group[0].chapter_id}</span> verse <span>{group[0].verse_id}</span>\r\n                </h2>\r\n                {#each group as word}\r\n                    <div class=\"row flex\">\r\n                        <div class=\"left center nogrow\">\r\n                            <div class=\"up greek\">{word.from}</div>\r\n                            <div class=\"down\">{word.romanization}</div>\r\n                        </div>\r\n                        <div class=\"middle nogrow\">\r\n                            <input class=\"stretch noborder uppercase\"\r\n                                type=\"text\"\r\n                                bind:value=\"{word.to}\"\r\n                                on:input={delay(()=> save(word))}>\r\n                        </div>\r\n                        <div class=\"right flex grow horizontal-scroll\">\r\n                            {#each word.variants as variant}\r\n                                <div class=\"entry\">\r\n                                    <div class=\"clickable\" on:dblclick={change(word, variant)}>{variant}</div>\r\n                                </div>\r\n                            {/each}\r\n                        </div>\r\n                    </div>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n    </VirtualList>\r\n</div>\r\n\r\n<style type=\"text/css\">\r\n    .left {\r\n        min-width: 180px;\r\n    }\r\n    .middle {\r\n        min-width: 200px;\r\n    }\r\n    .entry {\r\n        display: flex;\r\n        align-items: center;\r\n        white-space: nowrap;\r\n        padding: 0 12px;\r\n    }\r\n    .row {\r\n        margin: 16px 0;\r\n    }\r\n    .full-height {\r\n        height: 100%;\r\n    }\r\n</style>\r\n","export default async function post(url, data) {\r\n    let response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n    return await response.json()\r\n}\r\n","export default async function get(url) {\r\n    let response = await fetch(url)\r\n    return await response.json()\r\n}\r\n","export default function groupby(array, properties) {\r\n    let hash = {}\r\n    array.forEach(function(item) {\r\n        let id = properties.map(property => item[property]).join()\r\n        if (!hash[id])\r\n            hash[id] = []\r\n        hash[id].push(item)\r\n    })\r\n    return Object.values(hash)\r\n}\r\n","import App from './main.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {}\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","update_slot","slot","slot_definition","dirty","get_slot_changes_fn","get_slot_context_fn","slot_changes","lets","undefined","merged","len","Math","max","length","i","get_slot_changes","slot_context","p","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_custom_element_data","prop","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","crossorigin","current_component","is_crossorigin","window","parent","error","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","tick","add_render_callback","flushing","seen_callbacks","Set","update","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","outro_and_destroy_block","lookup","mount_component","customElement","on_destroy","m","new_on_destroy","map","filter","destroy_component","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","ready","ret","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","location","protocol","hostname","words","variants","word","to","sort","get","attach","romanization","romanize","delay","clearTimeout","timer","setTimeout","apply","groups","group","id","chapter_id","verse_id","slot_ctx","getComputedStyle","position","iframe","tabIndex","unsubscribe","source","contentWindow","onload","r","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","set","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","rows","viewport","contents","visible","mounted","average_height","items","height","itemHeight","offset","start","end","height_map","viewport_height","top","bottom","scroll","requestAnimationFrame","step","time","delta","x","scrollTop","object","scrollTo","offsetTop","getElementsByTagName","content_height","row","offsetHeight","remaining","refresh","old_start","v","y","row_height","expected_height","actual_height","is_incomplete","save","word_id","result","async","url","response","fetch","method","headers","content-type","body","JSON","stringify","json","post","settings","array","properties","hash","item","property","join","values","groupby","groupid","findIndex","get_offset"],"mappings":"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"}